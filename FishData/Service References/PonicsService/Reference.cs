//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FishData.PonicsService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/PonicsSvc")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool BoolValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StringValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PonicsService.SensorsReading", Namespace="http://schemas.datacontract.org/2004/07/PonicsSvc")]
    [System.SerializableAttribute()]
    public partial class PonicsServiceSensorsReading : FishData.PonicsService.TableEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContainerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasureNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasureTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RawValuesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ReadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReadingAsStringField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContainerName {
            get {
                return this.ContainerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContainerNameField, value) != true)) {
                    this.ContainerNameField = value;
                    this.RaisePropertyChanged("ContainerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedAt {
            get {
                return this.CreatedAtField;
            }
            set {
                if ((this.CreatedAtField.Equals(value) != true)) {
                    this.CreatedAtField = value;
                    this.RaisePropertyChanged("CreatedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasureName {
            get {
                return this.MeasureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureNameField, value) != true)) {
                    this.MeasureNameField = value;
                    this.RaisePropertyChanged("MeasureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasureType {
            get {
                return this.MeasureTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureTypeField, value) != true)) {
                    this.MeasureTypeField = value;
                    this.RaisePropertyChanged("MeasureType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawValues {
            get {
                return this.RawValuesField;
            }
            set {
                if ((object.ReferenceEquals(this.RawValuesField, value) != true)) {
                    this.RawValuesField = value;
                    this.RaisePropertyChanged("RawValues");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reading {
            get {
                return this.ReadingField;
            }
            set {
                if ((this.ReadingField.Equals(value) != true)) {
                    this.ReadingField = value;
                    this.RaisePropertyChanged("Reading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReadingAsString {
            get {
                return this.ReadingAsStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadingAsStringField, value) != true)) {
                    this.ReadingAsStringField = value;
                    this.RaisePropertyChanged("ReadingAsString");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableEntity", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.Storage.Table")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FishData.PonicsService.PonicsServiceSensorsReading))]
    public partial class TableEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ETagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PartitionKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RowKeyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTimeOffset TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ETag {
            get {
                return this.ETagField;
            }
            set {
                if ((object.ReferenceEquals(this.ETagField, value) != true)) {
                    this.ETagField = value;
                    this.RaisePropertyChanged("ETag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartitionKey {
            get {
                return this.PartitionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PartitionKeyField, value) != true)) {
                    this.PartitionKeyField = value;
                    this.RaisePropertyChanged("PartitionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowKey {
            get {
                return this.RowKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RowKeyField, value) != true)) {
                    this.RowKeyField = value;
                    this.RaisePropertyChanged("RowKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PonicsService.PonicsFishLocation", Namespace="http://schemas.datacontract.org/2004/07/PonicsSvc")]
    [System.SerializableAttribute()]
    public partial class PonicsServicePonicsFishLocation : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FishIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTimeOffset FishLocationDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double XPosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double YPosField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ZPosField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FishId {
            get {
                return this.FishIdField;
            }
            set {
                if ((object.ReferenceEquals(this.FishIdField, value) != true)) {
                    this.FishIdField = value;
                    this.RaisePropertyChanged("FishId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset FishLocationDateTime {
            get {
                return this.FishLocationDateTimeField;
            }
            set {
                if ((this.FishLocationDateTimeField.Equals(value) != true)) {
                    this.FishLocationDateTimeField = value;
                    this.RaisePropertyChanged("FishLocationDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double XPos {
            get {
                return this.XPosField;
            }
            set {
                if ((this.XPosField.Equals(value) != true)) {
                    this.XPosField = value;
                    this.RaisePropertyChanged("XPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double YPos {
            get {
                return this.YPosField;
            }
            set {
                if ((this.YPosField.Equals(value) != true)) {
                    this.YPosField = value;
                    this.RaisePropertyChanged("YPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ZPos {
            get {
                return this.ZPosField;
            }
            set {
                if ((this.ZPosField.Equals(value) != true)) {
                    this.ZPosField = value;
                    this.RaisePropertyChanged("ZPos");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PonicsService.SeneyeSensorReading", Namespace="http://schemas.datacontract.org/2004/07/PonicsSvc")]
    [System.SerializableAttribute()]
    public partial class PonicsServiceSeneyeSensorReading : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AvgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AvgAsStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Critical_InField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstallationNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MeasureNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ReadingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReadingAsStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTimeOffset ReadingDateTimeOffsetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long SeneyeDateTimeTicksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrendField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Avg {
            get {
                return this.AvgField;
            }
            set {
                if ((this.AvgField.Equals(value) != true)) {
                    this.AvgField = value;
                    this.RaisePropertyChanged("Avg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvgAsString {
            get {
                return this.AvgAsStringField;
            }
            set {
                if ((object.ReferenceEquals(this.AvgAsStringField, value) != true)) {
                    this.AvgAsStringField = value;
                    this.RaisePropertyChanged("AvgAsString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Critical_In {
            get {
                return this.Critical_InField;
            }
            set {
                if ((object.ReferenceEquals(this.Critical_InField, value) != true)) {
                    this.Critical_InField = value;
                    this.RaisePropertyChanged("Critical_In");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstallationName {
            get {
                return this.InstallationNameField;
            }
            set {
                if ((object.ReferenceEquals(this.InstallationNameField, value) != true)) {
                    this.InstallationNameField = value;
                    this.RaisePropertyChanged("InstallationName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MeasureName {
            get {
                return this.MeasureNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasureNameField, value) != true)) {
                    this.MeasureNameField = value;
                    this.RaisePropertyChanged("MeasureName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Reading {
            get {
                return this.ReadingField;
            }
            set {
                if ((this.ReadingField.Equals(value) != true)) {
                    this.ReadingField = value;
                    this.RaisePropertyChanged("Reading");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReadingAsString {
            get {
                return this.ReadingAsStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ReadingAsStringField, value) != true)) {
                    this.ReadingAsStringField = value;
                    this.RaisePropertyChanged("ReadingAsString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset ReadingDateTimeOffset {
            get {
                return this.ReadingDateTimeOffsetField;
            }
            set {
                if ((this.ReadingDateTimeOffsetField.Equals(value) != true)) {
                    this.ReadingDateTimeOffsetField = value;
                    this.RaisePropertyChanged("ReadingDateTimeOffset");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long SeneyeDateTimeTicks {
            get {
                return this.SeneyeDateTimeTicksField;
            }
            set {
                if ((this.SeneyeDateTimeTicksField.Equals(value) != true)) {
                    this.SeneyeDateTimeTicksField = value;
                    this.RaisePropertyChanged("SeneyeDateTimeTicks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Trend {
            get {
                return this.TrendField;
            }
            set {
                if ((object.ReferenceEquals(this.TrendField, value) != true)) {
                    this.TrendField = value;
                    this.RaisePropertyChanged("Trend");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PonicsService.IPonicsService")]
    public interface IPonicsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetData", ReplyAction="http://tempuri.org/IPonicsService/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetData", ReplyAction="http://tempuri.org/IPonicsService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPonicsService/GetDataUsingDataContractResponse")]
        FishData.PonicsService.CompositeType GetDataUsingDataContract(FishData.PonicsService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IPonicsService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<FishData.PonicsService.CompositeType> GetDataUsingDataContractAsync(FishData.PonicsService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetReadingsSinceDateTime", ReplyAction="http://tempuri.org/IPonicsService/GetReadingsSinceDateTimeResponse")]
        FishData.PonicsService.PonicsServiceSensorsReading[] GetReadingsSinceDateTime(string InstallationName, System.DateTime SinceThisDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetReadingsSinceDateTime", ReplyAction="http://tempuri.org/IPonicsService/GetReadingsSinceDateTimeResponse")]
        System.Threading.Tasks.Task<FishData.PonicsService.PonicsServiceSensorsReading[]> GetReadingsSinceDateTimeAsync(string InstallationName, System.DateTime SinceThisDateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogFlorenceAction", ReplyAction="http://tempuri.org/IPonicsService/LogFlorenceActionResponse")]
        void LogFlorenceAction(string FlorenceInstance, string Action, string UserEntry, string TranslatedString, string PlantSays, string LightsToFlorence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogFlorenceAction", ReplyAction="http://tempuri.org/IPonicsService/LogFlorenceActionResponse")]
        System.Threading.Tasks.Task LogFlorenceActionAsync(string FlorenceInstance, string Action, string UserEntry, string TranslatedString, string PlantSays, string LightsToFlorence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogFlorenceSensors", ReplyAction="http://tempuri.org/IPonicsService/LogFlorenceSensorsResponse")]
        void LogFlorenceSensors(string FlorenceInstance, double Humidity, double Gas, double TemperatureC, double Light);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogFlorenceSensors", ReplyAction="http://tempuri.org/IPonicsService/LogFlorenceSensorsResponse")]
        System.Threading.Tasks.Task LogFlorenceSensorsAsync(string FlorenceInstance, double Humidity, double Gas, double TemperatureC, double Light);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSingleFishLocation", ReplyAction="http://tempuri.org/IPonicsService/LogSingleFishLocationResponse")]
        void LogSingleFishLocation(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation pfl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSingleFishLocation", ReplyAction="http://tempuri.org/IPonicsService/LogSingleFishLocationResponse")]
        System.Threading.Tasks.Task LogSingleFishLocationAsync(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation pfl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogBatchFishLocation", ReplyAction="http://tempuri.org/IPonicsService/LogBatchFishLocationResponse")]
        void LogBatchFishLocation(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation[] pfls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogBatchFishLocation", ReplyAction="http://tempuri.org/IPonicsService/LogBatchFishLocationResponse")]
        System.Threading.Tasks.Task LogBatchFishLocationAsync(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation[] pfls);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSingleSeneyeReading", ReplyAction="http://tempuri.org/IPonicsService/LogSingleSeneyeReadingResponse")]
        void LogSingleSeneyeReading(FishData.PonicsService.PonicsServiceSeneyeSensorReading ssr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSingleSeneyeReading", ReplyAction="http://tempuri.org/IPonicsService/LogSingleSeneyeReadingResponse")]
        System.Threading.Tasks.Task LogSingleSeneyeReadingAsync(FishData.PonicsService.PonicsServiceSeneyeSensorReading ssr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSeneyeSensorData", ReplyAction="http://tempuri.org/IPonicsService/LogSeneyeSensorDataResponse")]
        void LogSeneyeSensorData(string SensyeJSON_String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/LogSeneyeSensorData", ReplyAction="http://tempuri.org/IPonicsService/LogSeneyeSensorDataResponse")]
        System.Threading.Tasks.Task LogSeneyeSensorDataAsync(string SensyeJSON_String);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetTrue", ReplyAction="http://tempuri.org/IPonicsService/GetTrueResponse")]
        string GetTrue();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPonicsService/GetTrue", ReplyAction="http://tempuri.org/IPonicsService/GetTrueResponse")]
        System.Threading.Tasks.Task<string> GetTrueAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPonicsServiceChannel : FishData.PonicsService.IPonicsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PonicsServiceClient : System.ServiceModel.ClientBase<FishData.PonicsService.IPonicsService>, FishData.PonicsService.IPonicsService {
        
        public PonicsServiceClient() {
        }
        
        public PonicsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PonicsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PonicsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PonicsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public FishData.PonicsService.CompositeType GetDataUsingDataContract(FishData.PonicsService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<FishData.PonicsService.CompositeType> GetDataUsingDataContractAsync(FishData.PonicsService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public FishData.PonicsService.PonicsServiceSensorsReading[] GetReadingsSinceDateTime(string InstallationName, System.DateTime SinceThisDateTime) {
            return base.Channel.GetReadingsSinceDateTime(InstallationName, SinceThisDateTime);
        }
        
        public System.Threading.Tasks.Task<FishData.PonicsService.PonicsServiceSensorsReading[]> GetReadingsSinceDateTimeAsync(string InstallationName, System.DateTime SinceThisDateTime) {
            return base.Channel.GetReadingsSinceDateTimeAsync(InstallationName, SinceThisDateTime);
        }
        
        public void LogFlorenceAction(string FlorenceInstance, string Action, string UserEntry, string TranslatedString, string PlantSays, string LightsToFlorence) {
            base.Channel.LogFlorenceAction(FlorenceInstance, Action, UserEntry, TranslatedString, PlantSays, LightsToFlorence);
        }
        
        public System.Threading.Tasks.Task LogFlorenceActionAsync(string FlorenceInstance, string Action, string UserEntry, string TranslatedString, string PlantSays, string LightsToFlorence) {
            return base.Channel.LogFlorenceActionAsync(FlorenceInstance, Action, UserEntry, TranslatedString, PlantSays, LightsToFlorence);
        }
        
        public void LogFlorenceSensors(string FlorenceInstance, double Humidity, double Gas, double TemperatureC, double Light) {
            base.Channel.LogFlorenceSensors(FlorenceInstance, Humidity, Gas, TemperatureC, Light);
        }
        
        public System.Threading.Tasks.Task LogFlorenceSensorsAsync(string FlorenceInstance, double Humidity, double Gas, double TemperatureC, double Light) {
            return base.Channel.LogFlorenceSensorsAsync(FlorenceInstance, Humidity, Gas, TemperatureC, Light);
        }
        
        public void LogSingleFishLocation(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation pfl) {
            base.Channel.LogSingleFishLocation(InstallationName, pfl);
        }
        
        public System.Threading.Tasks.Task LogSingleFishLocationAsync(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation pfl) {
            return base.Channel.LogSingleFishLocationAsync(InstallationName, pfl);
        }
        
        public void LogBatchFishLocation(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation[] pfls) {
            base.Channel.LogBatchFishLocation(InstallationName, pfls);
        }
        
        public System.Threading.Tasks.Task LogBatchFishLocationAsync(string InstallationName, FishData.PonicsService.PonicsServicePonicsFishLocation[] pfls) {
            return base.Channel.LogBatchFishLocationAsync(InstallationName, pfls);
        }
        
        public void LogSingleSeneyeReading(FishData.PonicsService.PonicsServiceSeneyeSensorReading ssr) {
            base.Channel.LogSingleSeneyeReading(ssr);
        }
        
        public System.Threading.Tasks.Task LogSingleSeneyeReadingAsync(FishData.PonicsService.PonicsServiceSeneyeSensorReading ssr) {
            return base.Channel.LogSingleSeneyeReadingAsync(ssr);
        }
        
        public void LogSeneyeSensorData(string SensyeJSON_String) {
            base.Channel.LogSeneyeSensorData(SensyeJSON_String);
        }
        
        public System.Threading.Tasks.Task LogSeneyeSensorDataAsync(string SensyeJSON_String) {
            return base.Channel.LogSeneyeSensorDataAsync(SensyeJSON_String);
        }
        
        public string GetTrue() {
            return base.Channel.GetTrue();
        }
        
        public System.Threading.Tasks.Task<string> GetTrueAsync() {
            return base.Channel.GetTrueAsync();
        }
    }
}
